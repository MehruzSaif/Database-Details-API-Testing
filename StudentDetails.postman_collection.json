{
	"info": {
		"_postman_id": "1f6a14f9-14a0-4146-866f-95d578908f39",
		"name": "MehruzSaif",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25339820"
	},
	"item": [
		{
			"name": "Create student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"id\", jsonData.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//for generating First Name\r",
							"var firstName = pm.variables.replaceIn(\"{{$randomNamePrefix}}\");\r",
							"console.log(firstName);\r",
							"pm.environment.set(\"firstName\", firstName);\r",
							"\r",
							"//for generating Middle Name\r",
							"var middleName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"console.log(middleName);\r",
							"pm.environment.set(\"middleName\", middleName);\r",
							"\r",
							"//for generating Last Name\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
							"console.log(lastName);\r",
							"pm.environment.set(\"lastName\", lastName);\r",
							"\r",
							"//Generate random Date of Birth in MM/DD/YYYY Format\r",
							"function randomDate(start, end) {\r",
							"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"var date = randomDate(new Date(2000, 0, 1), new Date());\r",
							"var formattedDate = (date.getMonth()+1) + '/' + date.getDate() + '/' + date.getFullYear();\r",
							"console.log(\"DateOfBirth: \" + formattedDate);\r",
							"pm.environment.set(\"formattedDate\", formattedDate);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{firstName}}\",\r\n  \"middle_name\": \"{{middleName}}\",\r\n  \"last_name\": \"{{lastName}}\",\r\n  \"date_of_birth\": \"{{formattedDate}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/studentsDetails",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.length);\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"    break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"    break;\r",
							"\r",
							"}\r",
							"\r",
							"/* console.log(jsonData[2].first_name);\r",
							"console.log(jsonData[2].last_name); */\r",
							"\r",
							"/* //for printing all firstname\r",
							"for (i=0; i < jsonData.length; i++) {\r",
							"    if(jsonData[i].first_name == \"julia\"){\r",
							"    console.log(jsonData[i].first_name);\r",
							"    }\r",
							"}\r",
							"\r",
							"//for printing all lasttname\r",
							"for (i=0; i < jsonData.length; i++) {\r",
							"    if(jsonData[i].last_name == \"silva\"){\r",
							"    console.log(jsonData[i].last_name);\r",
							"    }\r",
							"} */"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/studentsDetails",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"id Validation\", function () {\r",
							"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"{{id}}\"))\r",
							"    });\r",
							"\r",
							"    pm.test(\"First Name Validation\", function(){\r",
							"        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"first_Name\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Middle Name Validation\", function(){\r",
							"        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"middle_Name\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Last Name Validation\", function(){\r",
							"        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"last_Name\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Date of Birth Validation\", function(){\r",
							"        pm.expect(jsonData.date_of_birth).to.eql(pm.environment.get(\"date_of_birth\"))\r",
							"    })\r",
							"    break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"    break;\r",
							"\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/studentsDetails/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Students Technicalskils",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//for generating random noun 1\r",
							"var language1 = pm.variables.replaceIn(\"{{$randomBsNoun}}\");\r",
							"console.log(language1);\r",
							"pm.environment.set(\"language1\", language1);\r",
							"\r",
							"//for generating random noun 2 \r",
							"var language2 = pm.variables.replaceIn(\"{{$randomBsNoun}}\");\r",
							"console.log(language2);\r",
							"pm.environment.set(\"language2\", language2);\r",
							"\r",
							"//Generate random Date in MM/DD/YYYY Format\r",
							"function randomDate1(start, end) {\r",
							"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"var date = randomDate1(new Date(2000, 0, 1), new Date());\r",
							"var expDate = (date.getMonth()+1) + '/' + date.getDate() + '/' + date.getFullYear();\r",
							"console.log(\"Experienced year: \" + expDate);\r",
							"pm.environment.set(\"expDate\", expDate);\r",
							"\r",
							"//Generate random Date MM/DD/YYYY Format\r",
							"function randomDate2(start, end) {\r",
							"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"var date = randomDate2(new Date(2000, 0, 1), new Date());\r",
							"var lastUsed = (date.getMonth()+1) + '/' + date.getDate() + '/' + date.getFullYear();\r",
							"console.log(\"Last used: \" + lastUsed);\r",
							"pm.environment.set(\"lastUsed\", lastUsed);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"language\": [\r\n    \"{{language1}}\",\r\n    \"{{language2}}\"\r\n  ],\r\n  \"yearexp\": \"{{expDate}}\",\r\n  \"lastused\": \"{{lastUsed}}\",\r\n  \"st_id\": {{id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/technicalskills",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//for generating new random 2 digits number for house number\r",
							"const houseNumber = _.random(10,99);\r",
							"console.log(houseNumber)\r",
							"pm.environment.set(\"houseNumber\", houseNumber);\r",
							"\r",
							"//for generating random city \r",
							"var city = pm.variables.replaceIn(\"{{$randomCity}}\");\r",
							"console.log(city);\r",
							"pm.environment.set(\"city\", city);\r",
							"\r",
							"//for generating random country\r",
							"var country = pm.variables.replaceIn(\"{{$randomCountry}}\");\r",
							"console.log(country);\r",
							"pm.environment.set(\"country\", country);\r",
							"\r",
							"//for generating random phone no.\r",
							"var mobileNumber = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");\r",
							"console.log(mobileNumber);\r",
							"pm.environment.set(\"mobileNumber\", mobileNumber);\r",
							"\r",
							"//for generating random address\r",
							"var address = pm.variables.replaceIn(\"{{$randomStreetAddress}}\");\r",
							"console.log(address);\r",
							"pm.environment.set(\"address\", address);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"    pm.test(\"Status code is 200.\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"status is true\", function(){\r",
							"        pm.expect(jsonData.status).to.eql(\"true\")\r",
							"    })\r",
							"\r",
							"    pm.test(\"Message data is success.\", function(){\r",
							"        pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"    })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Permanent_Address\": {\r\n    \"House_Number\": \"{{houseNumber}}\",\r\n    \"City\": \"{{city}}\",\r\n    \"State\": \"{{city}}\",\r\n    \"Country\": \"{{country}}\",\r\n    \"PhoneNumber\": [\r\n      {\r\n        \"Std_Code\": \"sample string 1\",\r\n        \"Home\": \"sample string 2\",\r\n        \"Mobile\": \"{{mobileNumber}}\"\r\n      },\r\n      {\r\n        \"Std_Code\": \"sample string 1\",\r\n        \"Home\": \"sample string 2\",\r\n        \"Mobile\": \"{{mobileNumber}}\"\r\n      }\r\n    ]\r\n  },\r\n  \"stId\": {{id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/addresses",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Student Full Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Language 1 Validation\", function(){\r",
							"        pm.expect(jsonData.language1).to.eql(pm.environment.get(\"{{language1}}\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Language 2 Validation\", function(){\r",
							"        pm.expect(jsonData.language2).to.eql(pm.environment.get(\"{{language2}}\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Year of Experience Validation\", function(){\r",
							"        pm.expect(jsonData.yearexp).to.eql(pm.environment.get(\"{{expDate}}\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"House Number Validation\", function(){\r",
							"        pm.expect(jsonData.House_Number).to.eql(pm.environment.get(\"{{houseNumber}}\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"City Validation\", function(){\r",
							"        pm.expect(jsonData.City).to.eql(pm.environment.get(\"{{city}}\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Country Validation\", function(){\r",
							"        pm.expect(jsonData.Country).to.eql(pm.environment.get(\"{{country}}\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Mobile number Validation\", function(){\r",
							"        pm.expect(jsonData.Mobile).to.eql(pm.environment.get(\"{{mobileNumber}}\"))\r",
							"    })\r",
							"\r",
							"    pm.test(\"Current Address Validation\", function(){\r",
							"        pm.expect(jsonData.Mobile).to.eql(pm.environment.get(\"{{address}}\"))\r",
							"    })\r",
							"    break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"    break;\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/FinalStudentDetails/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}